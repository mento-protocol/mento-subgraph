type Account @entity {
	id: Bytes!
	asVoting: VotingContract
	delegationFrom: [VoteDelegation!]! @derivedFrom(field: "delegator")
	delegationTo: [VoteDelegation!]! @derivedFrom(field: "delegatee")
	voteWeigth: [VoteWeight!]! @derivedFrom(field: "account")
	delegateChangedEvent: [DelegateChanged!]! @derivedFrom(field: "delegator")
	delegateChangedFromEvent: [DelegateChanged!]! @derivedFrom(field: "fromDelegate")
	delegateChangedToEvent: [DelegateChanged!]! @derivedFrom(field: "toDelegate")
	delegateVotesChangedEvent: [DelegateVotesChanged!]! @derivedFrom(field: "delegate")
	asLocking: Locking
	locks: [Lock!]! @derivedFrom(field: "owner")
	asTimelock: Timelock
	timelockedCalls: [TimelockCall!]! @derivedFrom(field: "target")
	asAccessControl: AccessControl
	membership: [AccessControlRoleMember!]! @derivedFrom(field: "account")
	roleGranted: [RoleGranted!]! @derivedFrom(field: "account")
	roleGrantedSender: [RoleGranted!]! @derivedFrom(field: "sender")
	roleRevoked: [RoleRevoked!]! @derivedFrom(field: "account")
	roleRevokedSender: [RoleRevoked!]! @derivedFrom(field: "sender")
	asGovernor: Governor
	proposed: [Proposal!]! @derivedFrom(field: "proposer")
	voted: [VoteReceipt!]! @derivedFrom(field: "voter")
	proposedCalls: [ProposalCall!]! @derivedFrom(field: "target")
	events: [Event!]! @derivedFrom(field: "emitter")
}
type VotingContract @entity(immutable: true) {
	id: Bytes!
	asAccount: Account!
	totalWeight: VoteWeight!
	weight: [VoteWeight!]! @derivedFrom(field: "contract")
	delegation: [VoteDelegation!]! @derivedFrom(field: "contract")
	delegateChangedEvent: [DelegateChanged!]! @derivedFrom(field: "contract")
	delegateVotesChangedEvent: [DelegateVotesChanged!]! @derivedFrom(field: "contract")
}
type VoteDelegation @entity {
	id: ID!
	contract: VotingContract!
	delegator: Account!
	delegatee: Account!
	delegateChangedEvent: [DelegateChanged!]! @derivedFrom(field: "delegation")
}
type VoteWeight @entity {
	id: ID!
	contract: VotingContract!
	account: Account
	value: BigInt!
	delegateVotesChangedEvent: [DelegateVotesChanged!]! @derivedFrom(field: "voteWeight")
}
type DelegateChanged implements Event @entity(immutable: true) {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	delegation: VoteDelegation
	contract: VotingContract!
	delegator: Account!
	fromDelegate: Account!
	toDelegate: Account!
}
type DelegateVotesChanged implements Event @entity(immutable: true) {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	voteWeight: VoteWeight
	contract: VotingContract!
	delegate: Account!
	oldValue: BigInt!
	newValue: BigInt!
}
type Locking @entity(immutable: true) {
	id: Bytes!
	asAccount: Account!
	mode: String
	locks: [Lock!]! @derivedFrom(field: "locking")
	lockCreate: [LockCreate!]! @derivedFrom(field: "locking")
	relock: [Relock!]! @derivedFrom(field: "locking")
	delegate: [Delegate!]! @derivedFrom(field: "locking")
	withdraw: [Withdraw!]! @derivedFrom(field: "locking")
}
type Lock @entity {
	id: ID!
	locking: Locking!
	lockId: BigInt!
	owner: Account!
	delegate: Account!
	time: BigInt!
	amount: BigInt!
	slope: Int!
	cliff: Int!
	replacedBy: Lock
	replaces: Lock
	relocked: Boolean!
	lockCreate: [LockCreate!]! @derivedFrom(field: "lock")
	relock: [Relock!]! @derivedFrom(field: "oldLock")
}
type LockCreate implements Event @entity(immutable: true) {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	locking: Locking!
	lock: Lock!
	owner: Account!
}
type Relock implements Event @entity(immutable: true) {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	locking: Locking!
	newLock: Lock!
	oldLock: Lock!
	owner: Account!
}
type Delegate implements Event @entity(immutable: true) {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	locking: Locking!
	lock: Lock!
	owner: Account!
	delegate: Account!
}
type Withdraw implements Event @entity(immutable: true) {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	locking: Locking!
	lock: Lock!
	owner: Account!
	amount: BigInt!
}
type Timelock @entity(immutable: true) {
	id: Bytes!
	asAccount: Account!
	operations: [TimelockOperation!]! @derivedFrom(field: "contract")
	scheduled: [TimelockOperationScheduled!]! @derivedFrom(field: "contract")
	executed: [TimelockOperationExecuted!]! @derivedFrom(field: "contract")
	cancelled: [TimelockOperationCancelled!]! @derivedFrom(field: "contract")
	mindelaychange: [TimelockMinDelayChange!]! @derivedFrom(field: "contract")
}
enum TimelockStatus {
	SCHEDULED
	EXECUTED
	CANCELED
}
type TimelockOperation @entity {
	id: ID!
	contract: Timelock!
	status: TimelockStatus!
	delay: BigInt!
	timestamp: BigInt!
	predecessor: TimelockOperation
	calls: [TimelockCall!]! @derivedFrom(field: "operation")
	scheduled: [TimelockOperationScheduled!]! @derivedFrom(field: "operation")
	executed: [TimelockOperationExecuted!]! @derivedFrom(field: "operation")
	cancelled: [TimelockOperationCancelled!]! @derivedFrom(field: "operation")
}
type TimelockCall @entity(immutable: true) {
	id: ID!
	operation: TimelockOperation!
	index: BigInt!
	target: Account!
	value: BigDecimal!
	data: Bytes!
	scheduled: [TimelockOperationScheduled!]! @derivedFrom(field: "call")
	executed: [TimelockOperationExecuted!]! @derivedFrom(field: "call")
}
type TimelockOperationScheduled implements Event @entity(immutable: true) {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	contract: Timelock!
	operation: TimelockOperation!
	call: TimelockCall!
}
type TimelockOperationExecuted implements Event @entity(immutable: true) {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	contract: Timelock!
	operation: TimelockOperation!
	call: TimelockCall!
}
type TimelockOperationCancelled implements Event @entity(immutable: true) {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	contract: Timelock!
	operation: TimelockOperation!
}
type TimelockMinDelayChange implements Event @entity(immutable: true) {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	contract: Timelock!
	delay: BigInt!
}
type AccessControl @entity(immutable: true) {
	id: Bytes!
	asAccount: Account!
	roles: [AccessControlRole!]! @derivedFrom(field: "contract")
}
type Role @entity(immutable: true) {
	id: Bytes!
	roleOf: [AccessControlRole!]! @derivedFrom(field: "role")
}
type AccessControlRole @entity {
	id: ID!
	contract: AccessControl!
	role: Role!
	admin: AccessControlRole!
	adminOf: [AccessControlRole!]! @derivedFrom(field: "admin")
	members: [AccessControlRoleMember!]! @derivedFrom(field: "accesscontrolrole")
	roleGranted: [RoleGranted!]! @derivedFrom(field: "role")
	roleRevoked: [RoleRevoked!]! @derivedFrom(field: "role")
	roleAdminChanged: [RoleAdminChanged!]! @derivedFrom(field: "role")
}
type AccessControlRoleMember @entity {
	id: ID!
	accesscontrolrole: AccessControlRole!
	account: Account!
}
type RoleAdminChanged implements Event @entity(immutable: true) {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	role: AccessControlRole!
	newAdminRole: AccessControlRole!
	previousAdminRole: AccessControlRole!
}
type RoleGranted implements Event @entity(immutable: true) {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	role: AccessControlRole!
	account: Account!
	sender: Account!
}
type RoleRevoked implements Event @entity(immutable: true) {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	role: AccessControlRole!
	account: Account!
	sender: Account!
}
type Governor @entity(immutable: true) {
	id: Bytes!
	asAccount: Account!
	mode: String
	proposals: [Proposal!]! @derivedFrom(field: "governor")
	proposalCreated: [ProposalCreated!]! @derivedFrom(field: "governor")
	proposalQueued: [ProposalQueued!]! @derivedFrom(field: "governor")
	proposalExecuted: [ProposalExecuted!]! @derivedFrom(field: "governor")
	proposalCanceled: [ProposalCanceled!]! @derivedFrom(field: "governor")
	votecast: [VoteCast!]! @derivedFrom(field: "governor")
}
type Proposal @entity {
	id: ID!
	governor: Governor!
	proposalId: BigInt!
	proposer: Account!
	startBlock: BigInt!
	endBlock: BigInt!
	description: String!
	eta: BigInt
	canceled: Boolean!
	queued: Boolean!
	executed: Boolean!
	calls: [ProposalCall!]! @derivedFrom(field: "proposal")
	supports: [ProposalSupport!]! @derivedFrom(field: "proposal")
	receipts: [VoteReceipt!]! @derivedFrom(field: "proposal")
	proposalCreated: [ProposalCreated!]! @derivedFrom(field: "proposal")
	proposalQueued: [ProposalQueued!]! @derivedFrom(field: "proposal")
	proposalExecuted: [ProposalExecuted!]! @derivedFrom(field: "proposal")
	proposalCanceled: [ProposalCanceled!]! @derivedFrom(field: "proposal")
	votecast: [VoteCast!]! @derivedFrom(field: "proposal")
}
type ProposalCall @entity(immutable: true) {
	id: ID!
	proposal: Proposal!
	index: Int!
	target: Account!
	value: BigDecimal!
	signature: String!
	calldata: Bytes!
}
type ProposalSupport @entity {
	id: ID!
	proposal: Proposal!
	support: Int!
	weight: BigInt!
	votes: [VoteReceipt!]! @derivedFrom(field: "support")
}
type VoteReceipt @entity(immutable: true) {
	id: ID!
	proposal: Proposal!
	voter: Account!
	support: ProposalSupport!
	weight: BigInt!
	reason: String!
	params: Bytes
}
type ProposalCreated implements Event @entity(immutable: true) {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	governor: Governor!
	proposal: Proposal!
	proposer: Account!
}
type ProposalQueued implements Event @entity(immutable: true) {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	governor: Governor!
	proposal: Proposal!
	eta: BigInt!
}
type ProposalExecuted implements Event @entity(immutable: true) {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	governor: Governor!
	proposal: Proposal!
}
type ProposalCanceled implements Event @entity(immutable: true) {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	governor: Governor!
	proposal: Proposal!
}
type VoteCast implements Event @entity(immutable: true) {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	governor: Governor!
	proposal: Proposal!
	support: ProposalSupport!
	receipt: VoteReceipt!
	voter: Account!
}
interface Event {
	id: ID!
	transaction: Transaction!
	emitter: Account!
	timestamp: BigInt!
}
type Transaction @entity(immutable: true) {
	id: ID!
	timestamp: BigInt!
	blockNumber: BigInt!
	events: [Event!]! @derivedFrom(field: "transaction")
}
